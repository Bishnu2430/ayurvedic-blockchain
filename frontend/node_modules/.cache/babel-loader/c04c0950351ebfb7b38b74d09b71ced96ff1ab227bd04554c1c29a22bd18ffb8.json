{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:3001/api\";\nclass ApiService {\n  constructor() {\n    // Auth endpoints\n    this.auth = {\n      login: credentials => this.post(\"/auth/login\", credentials),\n      register: userData => this.post(\"/auth/register\", userData)\n    };\n    // User endpoints\n    this.users = {\n      getProfile: () => this.get(\"/users/profile\"),\n      updateProfile: data => this.put(\"/users/profile\", data),\n      getUsers: params => this.get(\"/users\", {\n        params\n      }),\n      getUserById: userId => this.get(`/users/${userId}`),\n      updateUserStatus: (userId, isActive) => this.put(`/users/${userId}/status`, {\n        isActive\n      })\n    };\n    // Herb endpoints\n    this.herbs = {\n      getHerbs: params => this.get(\"/herbs\", {\n        params\n      }),\n      getMyHerbs: () => this.get(\"/herbs/my-herbs\"),\n      searchHerbs: query => this.get(\"/herbs/search\", {\n        params: {\n          q: query\n        }\n      }),\n      getStats: () => this.get(\"/herbs/stats\"),\n      updateMetadata: (herbId, metadata) => this.put(`/herbs/${herbId}/metadata`, {\n        metadata\n      })\n    };\n    // Fabric/Blockchain endpoints\n    this.fabric = {\n      recordCollection: data => this.post(\"/fabric/collect\", data),\n      addQualityTest: data => this.post(\"/fabric/quality-test\", data),\n      addProcessingStep: data => this.post(\"/fabric/process\", data),\n      getHerbJourney: herbId => this.get(`/fabric/herb/${herbId}`),\n      traceByQR: qrCode => this.post(\"/fabric/trace\", {\n        qrCode\n      }),\n      getHerbBatches: params => this.get(\"/fabric\", {\n        params\n      })\n    };\n    // Health check\n    this.health = () => axios.get(`${API_BASE_URL.replace(\"/api\", \"\")}/health`);\n    this.axios = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 10000,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    // Request interceptor to add auth token\n    this.axios.interceptors.request.use(config => {\n      const token = localStorage.getItem(\"token\");\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Response interceptor to handle common errors\n    this.axios.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        // Token expired or invalid\n        localStorage.removeItem(\"token\");\n        window.location.href = \"/login\";\n      }\n      return Promise.reject(error);\n    });\n  }\n  setAuthToken(token) {\n    if (token) {\n      this.axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    } else {\n      delete this.axios.defaults.headers.common[\"Authorization\"];\n    }\n  }\n\n  // Generic methods\n  get(url, config = {}) {\n    return this.axios.get(url, config);\n  }\n  post(url, data, config = {}) {\n    return this.axios.post(url, data, config);\n  }\n  put(url, data, config = {}) {\n    return this.axios.put(url, data, config);\n  }\n  delete(url, config = {}) {\n    return this.axios.delete(url, config);\n  }\n}\nconst api = new ApiService();\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","auth","login","credentials","post","register","userData","users","getProfile","get","updateProfile","data","put","getUsers","params","getUserById","userId","updateUserStatus","isActive","herbs","getHerbs","getMyHerbs","searchHerbs","query","q","getStats","updateMetadata","herbId","metadata","fabric","recordCollection","addQualityTest","addProcessingStep","getHerbJourney","traceByQR","qrCode","getHerbBatches","health","replace","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","setAuthToken","defaults","common","url","delete","api"],"sources":["/home/bishnu/ayurvedic-blockchain/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL || \"http://localhost:3001/api\";\n\nclass ApiService {\n  constructor() {\n    this.axios = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 10000,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    // Request interceptor to add auth token\n    this.axios.interceptors.request.use(\n      (config) => {\n        const token = localStorage.getItem(\"token\");\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => {\n        return Promise.reject(error);\n      }\n    );\n\n    // Response interceptor to handle common errors\n    this.axios.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        if (error.response?.status === 401) {\n          // Token expired or invalid\n          localStorage.removeItem(\"token\");\n          window.location.href = \"/login\";\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  setAuthToken(token) {\n    if (token) {\n      this.axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    } else {\n      delete this.axios.defaults.headers.common[\"Authorization\"];\n    }\n  }\n\n  // Generic methods\n  get(url, config = {}) {\n    return this.axios.get(url, config);\n  }\n\n  post(url, data, config = {}) {\n    return this.axios.post(url, data, config);\n  }\n\n  put(url, data, config = {}) {\n    return this.axios.put(url, data, config);\n  }\n\n  delete(url, config = {}) {\n    return this.axios.delete(url, config);\n  }\n\n  // Auth endpoints\n  auth = {\n    login: (credentials) => this.post(\"/auth/login\", credentials),\n    register: (userData) => this.post(\"/auth/register\", userData),\n  };\n\n  // User endpoints\n  users = {\n    getProfile: () => this.get(\"/users/profile\"),\n    updateProfile: (data) => this.put(\"/users/profile\", data),\n    getUsers: (params) => this.get(\"/users\", { params }),\n    getUserById: (userId) => this.get(`/users/${userId}`),\n    updateUserStatus: (userId, isActive) =>\n      this.put(`/users/${userId}/status`, { isActive }),\n  };\n\n  // Herb endpoints\n  herbs = {\n    getHerbs: (params) => this.get(\"/herbs\", { params }),\n    getMyHerbs: () => this.get(\"/herbs/my-herbs\"),\n    searchHerbs: (query) => this.get(\"/herbs/search\", { params: { q: query } }),\n    getStats: () => this.get(\"/herbs/stats\"),\n    updateMetadata: (herbId, metadata) =>\n      this.put(`/herbs/${herbId}/metadata`, { metadata }),\n  };\n\n  // Fabric/Blockchain endpoints\n  fabric = {\n    recordCollection: (data) => this.post(\"/fabric/collect\", data),\n    addQualityTest: (data) => this.post(\"/fabric/quality-test\", data),\n    addProcessingStep: (data) => this.post(\"/fabric/process\", data),\n    getHerbJourney: (herbId) => this.get(`/fabric/herb/${herbId}`),\n    traceByQR: (qrCode) => this.post(\"/fabric/trace\", { qrCode }),\n    getHerbBatches: (params) => this.get(\"/fabric\", { params }),\n  };\n\n  // Health check\n  health = () => axios.get(`${API_BASE_URL.replace(\"/api\", \"\")}/health`);\n}\n\nconst api = new ApiService();\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}